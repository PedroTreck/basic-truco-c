#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct Endereco
{
	char rua[25], complemento[15], bairro[15], cidade[15], estado[15], pais[15];
	int numero, cep;
}Endereco;

typedef struct Data
{
	int dia, mes, ano;
}Data;

typedef struct Telefone
{
	int ddd, numero;
}Telefone;

typedef struct Agenda
{
	char nome[45], email[45];
	Telefone telefone;
	Endereco endereco;
	Data data;
}Agenda;

int menu();
int menu_search();
void search_name(Agenda *agenda, int countAgenda);
void read_schedule(Agenda *agenda, int *countAgenda);
void ordem_schedule(Agenda *agenda, int countAgenda);
void read_database(Agenda *agenda);
void write_database(Agenda *agenda, int countAgenda);
void listar_agenda(Agenda *agenda, int countAgenda);
void swap_schedule(Agenda *agenda, int *countAgenda);
void search_month_day(Agenda *agenda, int countAgenda);
void search_day(Agenda *agenda, int countAgenda);

int main()
{

	Agenda agenda[100];
	int countAgenda = 0;

	while (1) {
		switch (menu())
		{
		case 1: read_schedule(agenda, &countAgenda);
			break;
		case 2:
			switch (menu_search())
			{
			case 1:search_name(agenda, countAgenda);
				break;
			case 2:search_day(agenda, countAgenda);
				break;
			case 3:search_month_day(agenda, countAgenda);
				break;
			default:printf("Opcao Invalida");
				break;
			}
			break;
		case 3:
			swap_schedule(agenda, &countAgenda);
			break;
		case 4:
			listar_agenda(agenda, countAgenda);
			break;
		case 5:exit(0);
			break;
		default:printf("Opcao Invalida");
			break;
		}
	}

	return 0;
}

int menu()
{
	int opc;

	printf("Informe o que deseja\n");

	printf("1 - Inserir\n");
	printf("2 - Buscar\n");
	printf("3 - Remover\n");
	printf("4 - Imprimir\n");
	printf("5 - Sair\n:");
	scanf("%d", &opc);
	getchar();

	return opc;
}

void read_schedule(Agenda *agenda, int *countAgenda)
{
	if ((*countAgenda) <= 100) {
		printf("Informe o seu nome: ");
		fgets(agenda[(*countAgenda)].nome, sizeof(agenda[(*countAgenda)].nome), stdin);
		printf("Informe seu email: ");
		fgets(agenda[(*countAgenda)].email, sizeof(agenda[(*countAgenda)].email), stdin);
		printf("Informe a cidade onde mora: ");
		fgets(agenda[(*countAgenda)].endereco.cidade, sizeof(agenda[(*countAgenda)].endereco.cidade), stdin);
		printf("Informe o cep: ");
		scanf("%d", &agenda[(*countAgenda)].endereco.cep);
		getchar();
		printf("Informe o nome da rua: ");
		fgets(agenda[(*countAgenda)].endereco.rua, sizeof(agenda[(*countAgenda)].endereco.rua), stdin);
		printf("Informe o numero da sua casa: ");
		scanf("%d", &agenda[(*countAgenda)].endereco.numero);
		getchar();
		printf("Informe o complemento: ");
		fgets(agenda[(*countAgenda)].endereco.complemento, sizeof(agenda[(*countAgenda)].endereco.complemento), stdin);
		printf("Informe o estado: ");
		fgets(agenda[(*countAgenda)].endereco.estado, sizeof(agenda[(*countAgenda)].endereco.estado), stdin);
		printf("Informe o pais onde reside: ");
		fgets(agenda[(*countAgenda)].endereco.pais, sizeof(agenda[(*countAgenda)].endereco.pais), stdin);
		printf("Digite a data de aniversario");
		scanf("%d", &agenda[(*countAgenda)].data.dia);
		scanf("%d", &agenda[(*countAgenda)].data.mes);
		scanf("%d", &agenda[(*countAgenda)].data.ano);
		getchar();

		(*countAgenda)++;
		ordem_schedule(agenda, *countAgenda);
	}
	else {
		printf("Agenda Lotada");
	}
}

void ordem_schedule(Agenda *agenda, int countAgenda) {

	int i, j;
	Agenda temp;

	for (i = 0; i < countAgenda - 1; i++)
	{
		for (j = i + 1; j < countAgenda; j++)
		{
			if (strcmp(agenda[i].nome, agenda[j].nome) > 0)
			{
				temp = agenda[i];
				agenda[i] = agenda[j];
				agenda[j] = temp;
			}
		}
	}
}

int menu_search() {


	int opc;
	printf("1 - Buscar nome\n");
	printf("2 - Buscar dia de aniversario\n");
	printf("3 - Buscar dia e mes de aniversario\n");
	printf("4 - Voltar\n ");

	scanf("%d", &opc);
	getchar();
	if (opc > 3) main();

	return opc;
}

void print_schedule(Agenda *agenda, int numeroAgenda)
{
	printf("\n\nInforme o seu nome: %s", agenda[numeroAgenda].nome);
	printf("Informe seu email: %s", agenda[numeroAgenda].email);
	printf("Informe a cidade onde mora: %s", &agenda[numeroAgenda].endereco.cidade);
	printf("Informe o cep: %d", agenda[numeroAgenda].endereco.cep);
	printf("Informe o nome da rua: %s", agenda[numeroAgenda].endereco.rua);
	printf("Informe o numero da sua casa: %d", agenda[numeroAgenda].endereco.numero);
	printf("Informe o complemento:%s", agenda[numeroAgenda].endereco.complemento);
	printf("Informe o estado: %s", agenda[numeroAgenda].endereco.estado);
	printf("Informe o pais onde reside:%s", agenda[numeroAgenda].endereco.pais);
	printf("Digite a data de aniversario %d/%d/%d", agenda[numeroAgenda].data.dia, agenda[numeroAgenda].data.mes, agenda[numeroAgenda].data.ano);

}

void search_name(Agenda *agenda, int countAgenda) {
	int i;
	char nome[45];

	printf("Buscar nome: ");
	fgets(nome, sizeof(nome), stdin);

	for (i = 0; i < countAgenda; i++) {
		if (strcmp(nome, agenda[i].nome) == 0)
			print_schedule(agenda, i);
	}
}

void search_day(Agenda *agenda, int countAgenda) {
	int i;
	int dia;

	printf("Buscar dia: ");
	scanf("%d", &dia);

	for (i = 0; i < countAgenda; i++) {
		if (dia == agenda[i].data.dia)
			print_schedule(agenda, i);
	}
}

void search_month_day(Agenda *agenda, int countAgenda) {
	int i;
	int mes, dia;

	printf("Buscar dia e mes: ");
	scanf("%d", &dia);
	scanf("%d", &mes);

	for (i = 0; i < countAgenda; i++) {
		if ((mes == agenda[i].data.mes) && (dia == agenda[i].data.dia))
			print_schedule(agenda, i);
	}
}

void swap_schedule(Agenda *agenda, int *countAgenda) {

	int i;
	char nome[45];

	printf("Buscar nome: ");
	fgets(nome, sizeof(nome), stdin);

	for (i = 0; i < (*countAgenda);i++) {
		if (strcmp(nome, agenda[i].nome) == 0) {
			(*countAgenda)--;
			agenda[i] = agenda[(*countAgenda)];
			ordem_schedule(agenda, *countAgenda);
		}
	}
}

void listar_agenda(Agenda *agenda, int countAgenda) {
	int i;
	for (i = 0; i < countAgenda; i++)
		print_schedule(agenda, i);
}




